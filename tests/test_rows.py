from collections import OrderedDict
from datetime import datetime

import pytz

import kobuddy
from kobuddy import Highlight, Book, Books

TEST_BOOK = Book(title='test title', author='test author', content_id='fwfwf', isbn='2424')

def test_hl_no_datecreated():
    row = OrderedDict([
        ('BookmarkID', 'bbbbb'),
        ('VolumeID', 'vvvv'),
        ('ContentID', 'cccc'),
        ('StartContainerPath', 'span#kobo\\.31\\.4'),
        ('StartContainerChildIndex', -99),
        ('StartOffset', 117),
        ('EndContainerPath', 'span#kobo\\.31\\.5'),
        ('EndContainerChildIndex', -99),
        ('EndOffset', 141),
        ('Text', '<blah blah quote>'),
        ('Annotation', None),
        ('ExtraAnnotationData', None),
        ('DateCreated', None),
        ('ChapterProgress', 0.75),
        ('Hidden', 'false'),
        ('Version', ''),
        ('DateModified', '2014-05-17T21:05:35Z'),
        ('Creator', None),
        ('UUID', None),
        ('UserID', '6fc7'),
        ('SyncTime', '2019-05-21T16:46:17Z'),
        ('Published', 'false'),
    ])
    hl = Highlight(row, TEST_BOOK)
    # TODO can we automate this?
    for attr in [a for a in dir(Highlight) if not a.startswith('_')]:
        value = getattr(hl, attr)
        assert value is not None

import pytest

# TODO maybe search for ExtraData markers?
@pytest.mark.parametrize('exp,extra', [
    (0 , '000000010000002C00500061006700650073005400750072006E00650064005400680069007300530065007300730069006F006E000000020000000000'),
    (0 , '000000030000003400450078007400720061004400610074006100530079006e00630065006400540069006d00650045006c006100700073006500640000000a000000000200300000002800450078007400720061004400610074006100530079006e0063006500640043006f0075006e00740000000200000000030000002e00450078007400720061004400610074006100520065006100640069006e0067005300650063006f006e006400730000000a00000000020030'),

    (1 , '000000030000001E006500760065006E007400540069006D0065007300740061006D0070007300000009000000000100000003005B4F241E00000018004D006F006E006500740069007A006100740069006F006E0000000001FFFFFFFF0000002000490073004D00610072006B0041007300460069006E00690073006800650064000000010000'),
    (13, '000000020000001E006500760065006E007400540069006D0065007300740061006D0070007300000009000000000D00000003005B55AC1100000003005B55D50400000003005B55D50900000003005B55D50B00000003005B55D53100000003005B55D53600000003005B55D53700000003005B55D53A00000003005B55D53C00000003005B55D53E00000003005B55D55800000003005B55FE7100000003005B56088C00000010005600690065007700540079007000650000000A000000000A0053006C006500650070'),
    (16, '000000020000001E006500760065006E007400540069006D0065007300740061006D0070007300000009000000001000000003005B71E87B00000003005B756BD900000003005B756BE100000003005B759E6800000003005B75C07C00000003005B76687800000003005B7AE4A300000003005B7B1FDD00000003005B7B274F00000003005B7B278300000003005B7B279800000003005B7B27E600000003005B7B281E00000003005B7B286500000003005B7B28C000000003005B7B28D300000010005600690065007700540079007000650000000A00000000160041006E006E006F0074006100740069006F006E0073'),



])
def test_iter_events_aux_Event(exp, extra):
    from kobuddy import _iter_events_aux_Event
    books = Books()
    books.add(TEST_BOOK)

    row = OrderedDict([
        ('EventType', 3),
        ('EventCount', 35),
        ('LastOccurrence', '2019-01-22T23:07:47.000'),
        ('ContentID', 'fwfwf'),
        ('Checksum', 'bd0fda782920dbaa57d593fa70bcf3de'),
        ('hex(ExtraData)', extra),
    ])
    import codecs
    print(codecs.decode(extra, 'hex'))
    res = list(_iter_events_aux_Event(row=row, books=books))
    assert len(res) == exp
    # if len(res) > 0:
    #     # TODO only works for thrid test, fix it later..
    #     assert res[0].dt  == datetime(year=2018, month=12, day=17, hour=7 , minute=55, second=26, tzinfo=pytz.utc)
    #     assert res[-1].dt == datetime(year=2019, month=1 , day=22, hour=23, minute=7 , second=47, tzinfo=pytz.utc)
